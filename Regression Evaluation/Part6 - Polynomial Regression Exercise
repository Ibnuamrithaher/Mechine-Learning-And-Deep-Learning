{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPOElYLLcBcS81N1aHh7KGu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ibnuamrithaher/Mechine-Learning-And-Deep-Learning/blob/main/Regression%20Evaluation/Part6%20-%20Polynomial%20Regression%20Exercise\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install luwiji\n",
        "!pip install scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F72-HA5QYfGo",
        "outputId": "5a0b1df8-a41a-4f11-9d8c-6a4072e5b8be"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting luwiji\n",
            "  Downloading luwiji-1.2.3.tar.gz (41.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.0/41.0 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from luwiji) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from luwiji) (1.13.1)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from luwiji) (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (from luwiji) (1.6.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from luwiji) (3.10.0)\n",
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (from luwiji) (7.7.1)\n",
            "Collecting jcopml (from luwiji)\n",
            "  Downloading jcopml-1.2.7.tar.gz (31 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.11/dist-packages (from luwiji) (11.1.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from luwiji) (3.4.2)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (0.2.0)\n",
            "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (5.7.1)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (3.6.10)\n",
            "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (7.34.0)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets->luwiji) (3.0.13)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.11/dist-packages (from jcopml->luwiji) (0.13.2)\n",
            "Collecting scikit-optimize (from jcopml->luwiji)\n",
            "  Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl.metadata (9.7 kB)\n",
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.11/dist-packages (from jcopml->luwiji) (0.14.4)\n",
            "Requirement already satisfied: pyperclip in /usr/local/lib/python3.11/dist-packages (from jcopml->luwiji) (1.9.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (4.55.4)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (24.2)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (3.2.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib->luwiji) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->luwiji) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->luwiji) (2025.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->luwiji) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn->luwiji) (3.5.0)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets->luwiji) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets->luwiji) (6.3.3)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (75.1.0)\n",
            "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets->luwiji)\n",
            "  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (3.0.50)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (2.18.0)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (0.1.7)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets->luwiji) (4.9.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib->luwiji) (1.17.0)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.11/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets->luwiji) (6.5.5)\n",
            "Collecting pyaml>=16.9 (from scikit-optimize->jcopml->luwiji)\n",
            "  Downloading pyaml-25.1.0-py3-none-any.whl.metadata (12 kB)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels->jcopml->luwiji) (1.0.1)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets->luwiji) (0.8.4)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (3.1.5)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (24.0.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (23.1.0)\n",
            "Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (5.7.2)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (5.10.4)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (7.16.5)\n",
            "Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.6.0)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.21.1)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.2.0)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets->luwiji) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets->luwiji) (0.2.13)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from pyaml>=16.9->scikit-optimize->jcopml->luwiji) (6.0.2)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (4.3.6)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.11/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.2.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (4.12.3)\n",
            "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (6.2.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.3.0)\n",
            "Requirement already satisfied: markupsafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (3.0.2)\n",
            "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (3.1.0)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.10.2)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.5.1)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (2.21.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (4.23.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (21.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.5.1)\n",
            "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.4.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (24.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.36.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (0.22.3)\n",
            "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.11/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.24.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.17.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (2.6)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (2.22)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.8.0)\n",
            "Requirement already satisfied: typing-extensions>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from referencing>=0.28.4->jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (4.12.2)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<4,>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets->luwiji) (1.3.1)\n",
            "Downloading scikit_optimize-0.10.2-py2.py3-none-any.whl (107 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.8/107.8 kB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m28.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pyaml-25.1.0-py3-none-any.whl (26 kB)\n",
            "Building wheels for collected packages: luwiji, jcopml\n",
            "  Building wheel for luwiji (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for luwiji: filename=luwiji-1.2.3-py2.py3-none-any.whl size=41032443 sha256=cbe743b057809dae28926e05eea90f7459d9dde2981b21d60df5620782d94573\n",
            "  Stored in directory: /root/.cache/pip/wheels/25/9b/68/61b665f8682276ffbc7fa54bae3ccc541be2ed103979770b9b\n",
            "  Building wheel for jcopml (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for jcopml: filename=jcopml-1.2.7-py2.py3-none-any.whl size=45916 sha256=ddade2f602a8f32d0db9ba04a028b3f247c81ee31bf519e7d3bd4057074c7cf0\n",
            "  Stored in directory: /root/.cache/pip/wheels/77/a7/60/c75983f4da5b630422325c5048591b6ee9e2ce123bf2b7b357\n",
            "Successfully built luwiji jcopml\n",
            "Installing collected packages: pyaml, jedi, scikit-optimize, jcopml, luwiji\n",
            "Successfully installed jcopml-1.2.7 jedi-0.19.2 luwiji-1.2.3 pyaml-25.1.0 scikit-optimize-0.10.2\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "LGJlmZjNYOMx"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "from jcopml.pipeline import num_pipe, cat_pipe\n",
        "from jcopml.utils import save_model, load_model\n",
        "from jcopml.plot import plot_missing_value\n",
        "from jcopml.feature_importance import mean_score_decrease"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Import Data**"
      ],
      "metadata": {
        "id": "t-hFDq7gYh8s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/Ibnuamrithaher/Mechine-Learning-And-Deep-Learning/refs/heads/main/Regression%20Evaluation/Data/taxi_fare.csv\"\n",
        "df = pd.read_csv(url, parse_dates=[\"pickup_datetime\"])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "4FkehoMyYjze",
        "outputId": "f652094e-4c9c-4059-b41a-7ecff44dad3f"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fare_amount     pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
              "0          4.5 2009-06-15 17:26:21        -73.844311        40.721319   \n",
              "1         16.9 2010-01-05 16:52:16        -74.016048        40.711303   \n",
              "2          5.7 2011-08-18 00:35:00        -73.982738        40.761270   \n",
              "3          7.7 2012-04-21 04:30:42        -73.987130        40.733143   \n",
              "4          5.3 2010-03-09 07:51:00        -73.968095        40.768008   \n",
              "\n",
              "   dropoff_longitude  dropoff_latitude  passenger_count  \n",
              "0         -73.841610         40.712278              1.0  \n",
              "1         -73.979268         40.782004              1.0  \n",
              "2         -73.991242         40.750562              2.0  \n",
              "3         -73.991567         40.758092              1.0  \n",
              "4         -73.956655         40.783762              1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6629877f-d3cd-4f00-9afa-e9c790bb1a5d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fare_amount</th>\n",
              "      <th>pickup_datetime</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>passenger_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.5</td>\n",
              "      <td>2009-06-15 17:26:21</td>\n",
              "      <td>-73.844311</td>\n",
              "      <td>40.721319</td>\n",
              "      <td>-73.841610</td>\n",
              "      <td>40.712278</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>16.9</td>\n",
              "      <td>2010-01-05 16:52:16</td>\n",
              "      <td>-74.016048</td>\n",
              "      <td>40.711303</td>\n",
              "      <td>-73.979268</td>\n",
              "      <td>40.782004</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.7</td>\n",
              "      <td>2011-08-18 00:35:00</td>\n",
              "      <td>-73.982738</td>\n",
              "      <td>40.761270</td>\n",
              "      <td>-73.991242</td>\n",
              "      <td>40.750562</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.7</td>\n",
              "      <td>2012-04-21 04:30:42</td>\n",
              "      <td>-73.987130</td>\n",
              "      <td>40.733143</td>\n",
              "      <td>-73.991567</td>\n",
              "      <td>40.758092</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.3</td>\n",
              "      <td>2010-03-09 07:51:00</td>\n",
              "      <td>-73.968095</td>\n",
              "      <td>40.768008</td>\n",
              "      <td>-73.956655</td>\n",
              "      <td>40.783762</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6629877f-d3cd-4f00-9afa-e9c790bb1a5d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6629877f-d3cd-4f00-9afa-e9c790bb1a5d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6629877f-d3cd-4f00-9afa-e9c790bb1a5d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-673043f0-e095-403d-9194-2e659f2c86a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-673043f0-e095-403d-9194-2e659f2c86a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-673043f0-e095-403d-9194-2e659f2c86a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 18919,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551542391318101,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2009-01-01 01:31:49\",\n        \"max\": \"2015-06-30 22:42:39\",\n        \"num_unique_values\": 18853,\n        \"samples\": [\n          \"2010-12-07 13:31:00\",\n          \"2010-05-21 10:19:00\",\n          \"2014-12-07 09:18:35\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.50353589495682,\n        \"min\": -74.438233,\n        \"max\": 40.766125,\n        \"num_unique_values\": 15896,\n        \"samples\": [\n          -73.98884699999998,\n          -73.959594,\n          -73.97946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.71505311684496,\n        \"min\": -74.006893,\n        \"max\": 401.083332,\n        \"num_unique_values\": 16479,\n        \"samples\": [\n          40.687722,\n          40.767037,\n          40.64743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.461398696963235,\n        \"min\": -84.654241,\n        \"max\": 40.802437,\n        \"num_unique_values\": 16077,\n        \"samples\": [\n          -73.98290300000002,\n          -73.967462,\n          -73.97253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.160511062855228,\n        \"min\": -74.006377,\n        \"max\": 41.366138,\n        \"num_unique_values\": 16528,\n        \"samples\": [\n          40.764902,\n          40.745811,\n          40.728542\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.282235622253472,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_missing_value(df, return_df = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 659
        },
        "id": "-vmO03m3Yqco",
        "outputId": "5b8e941a-ef49-4de7-9220-d33fec56e14d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   missing_value     %\n",
              "fare_amount                    0  0.00\n",
              "pickup_datetime                0  0.00\n",
              "pickup_longitude               0  0.00\n",
              "pickup_latitude                0  0.00\n",
              "dropoff_longitude              0  0.00\n",
              "dropoff_latitude               0  0.00\n",
              "passenger_count                1  0.01"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5205bd4a-7f81-40e2-a931-acc0b6e4d6ca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>missing_value</th>\n",
              "      <th>%</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>fare_amount</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_datetime</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_longitude</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_latitude</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <td>0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>passenger_count</th>\n",
              "      <td>1</td>\n",
              "      <td>0.01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5205bd4a-7f81-40e2-a931-acc0b6e4d6ca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5205bd4a-7f81-40e2-a931-acc0b6e4d6ca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5205bd4a-7f81-40e2-a931-acc0b6e4d6ca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e3a0aa23-7a3e-4d68-afb8-78daaf715884\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3a0aa23-7a3e-4d68-afb8-78daaf715884')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e3a0aa23-7a3e-4d68-afb8-78daaf715884 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"plot_missing_value(df, return_df = True)\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"missing_value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.003779644730092272,\n        \"min\": 0.0,\n        \"max\": 0.01,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.01,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "gMWmccuMZjip"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Extract Time Feature**"
      ],
      "metadata": {
        "id": "aBSnV3bLZvuF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pickup_dt = df.pickup_datetime.dt"
      ],
      "metadata": {
        "id": "-hANRHt_ZuRZ"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['year'] = pickup_dt.year\n",
        "df['month'] = pickup_dt.month\n",
        "df['day'] = pickup_dt.day_of_week\n",
        "df['hour'] = pickup_dt.hour\n",
        "df.drop(columns=\"pickup_datetime\", inplace=True)\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "RF8xo7zwaEhn",
        "outputId": "98760c29-0635-4a9e-b734-0acfcd2bed34"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
              "0          4.5        -73.844311        40.721319         -73.841610   \n",
              "1         16.9        -74.016048        40.711303         -73.979268   \n",
              "2          5.7        -73.982738        40.761270         -73.991242   \n",
              "3          7.7        -73.987130        40.733143         -73.991567   \n",
              "4          5.3        -73.968095        40.768008         -73.956655   \n",
              "\n",
              "   dropoff_latitude  passenger_count  year  month  day  hour  \n",
              "0         40.712278              1.0  2009      6    0    17  \n",
              "1         40.782004              1.0  2010      1    1    16  \n",
              "2         40.750562              2.0  2011      8    3     0  \n",
              "3         40.758092              1.0  2012      4    5     4  \n",
              "4         40.783762              1.0  2010      3    1     7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed4e508b-b93f-4f76-8ba2-a8c37ecb895a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fare_amount</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.5</td>\n",
              "      <td>-73.844311</td>\n",
              "      <td>40.721319</td>\n",
              "      <td>-73.841610</td>\n",
              "      <td>40.712278</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2009</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>16.9</td>\n",
              "      <td>-74.016048</td>\n",
              "      <td>40.711303</td>\n",
              "      <td>-73.979268</td>\n",
              "      <td>40.782004</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.7</td>\n",
              "      <td>-73.982738</td>\n",
              "      <td>40.761270</td>\n",
              "      <td>-73.991242</td>\n",
              "      <td>40.750562</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2011</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.7</td>\n",
              "      <td>-73.987130</td>\n",
              "      <td>40.733143</td>\n",
              "      <td>-73.991567</td>\n",
              "      <td>40.758092</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2012</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.3</td>\n",
              "      <td>-73.968095</td>\n",
              "      <td>40.768008</td>\n",
              "      <td>-73.956655</td>\n",
              "      <td>40.783762</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed4e508b-b93f-4f76-8ba2-a8c37ecb895a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed4e508b-b93f-4f76-8ba2-a8c37ecb895a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed4e508b-b93f-4f76-8ba2-a8c37ecb895a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91580864-ffd6-47aa-93ec-84a745ed0445\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91580864-ffd6-47aa-93ec-84a745ed0445')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91580864-ffd6-47aa-93ec-84a745ed0445 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 18918,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551667305380386,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.503807940212134,\n        \"min\": -74.438233,\n        \"max\": 40.766125,\n        \"num_unique_values\": 15895,\n        \"samples\": [\n          -73.98884699999998,\n          -73.959594,\n          -73.97946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.715227850955099,\n        \"min\": -74.006893,\n        \"max\": 401.083332,\n        \"num_unique_values\": 16478,\n        \"samples\": [\n          40.687722,\n          40.767037,\n          40.64743\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.461669642782223,\n        \"min\": -84.654241,\n        \"max\": 40.802437,\n        \"num_unique_values\": 16077,\n        \"samples\": [\n          -73.98290300000002,\n          -73.967462,\n          -73.97253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dropoff_latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.160671234355902,\n        \"min\": -74.006377,\n        \"max\": 41.366138,\n        \"num_unique_values\": 16528,\n        \"samples\": [\n          40.764902,\n          40.745811,\n          40.728542\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.282235622253472,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2009,\n          2010,\n          2014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          5,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          1,\n          21,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Extract Distance Feature**"
      ],
      "metadata": {
        "id": "P5Ckb6gibb_d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['distanc'] = np.abs(df.pickup_longitude - df.dropoff_longitude) + np.abs(df.pickup_latitude - df.dropoff_latitude)\n",
        "df.drop(columns=['pickup_longitude','dropoff_longitude','pickup_latitude','dropoff_latitude'], inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "bq_PtpjAbmy3",
        "outputId": "7661edbc-3b40-438d-da90-8de20c3c4a0e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   fare_amount  passenger_count  year  month  day  hour   distanc\n",
              "0          4.5              1.0  2009      6    0    17  0.011742\n",
              "1         16.9              1.0  2010      1    1    16  0.107481\n",
              "2          5.7              2.0  2011      8    3     0  0.019212\n",
              "3          7.7              1.0  2012      4    5     4  0.029386\n",
              "4          5.3              1.0  2010      3    1     7  0.027194"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-18add938-5ab7-4568-b37d-18b9892fca53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fare_amount</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>distanc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4.5</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2009</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>0.011742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>16.9</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "      <td>0.107481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.7</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2011</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.019212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.7</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2012</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>0.029386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.3</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>0.027194</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18add938-5ab7-4568-b37d-18b9892fca53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-18add938-5ab7-4568-b37d-18b9892fca53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-18add938-5ab7-4568-b37d-18b9892fca53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-92687ae5-faf2-44ab-bd7a-c53d62833810\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-92687ae5-faf2-44ab-bd7a-c53d62833810')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-92687ae5-faf2-44ab-bd7a-c53d62833810 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 18918,\n  \"fields\": [\n    {\n      \"column\": \"fare_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.551667305380386,\n        \"min\": -3.0,\n        \"max\": 180.0,\n        \"num_unique_values\": 476,\n        \"samples\": [\n          35.44,\n          9.7,\n          25.45000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.282235622253472,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          2.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2009,\n          2010,\n          2014\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          5,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          1,\n          21,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distanc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.053979466124757,\n        \"min\": 0.0,\n        \"max\": 360.308562,\n        \"num_unique_values\": 18062,\n        \"samples\": [\n          0.07710799999998841,\n          0.15653999999999968,\n          0.016847000000012713\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Dataset Splitting**"
      ],
      "metadata": {
        "id": "6WGhcIsYYr5W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(columns=\"fare_amount\")\n",
        "y = df.fare_amount\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape,"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YBAcfJOaYtI9",
        "outputId": "bf46188c-1028-4c63-a86a-bc969f05a9d1"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((15134, 6), (3784, 6), (15134,), (3784,))"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "## **Training**"
      ],
      "metadata": {
        "id": "i2WSE-ZQYu4t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from jcopml.tuning import grid_search_params as gsp\n",
        ""
      ],
      "metadata": {
        "id": "e-xhOdVxd13y"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gsp.linreg_params"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IAFuj3SAeQkH",
        "outputId": "3f36fe2a-d44e-4b18-e0e3-3e52cb57704f"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'algo__fit_intercept': [True, False]}"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "5NgWdDYFeYyb",
        "outputId": "6969d631-5f11-4817-bbb5-98323019337b"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       passenger_count  year  month  day  hour   distanc\n",
              "7539               1.0  2011      6    1    22  0.000000\n",
              "578                3.0  2010      3    3    10  0.009293\n",
              "8056               5.0  2010      4    0     8  0.048951\n",
              "11761              1.0  2014     11    0    22  0.027145\n",
              "15531              1.0  2012     12    5    13  0.010498"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bceeb57b-0758-4737-9dd1-6721a79408b6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>hour</th>\n",
              "      <th>distanc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7539</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2011</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>22</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>578</th>\n",
              "      <td>3.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>0.009293</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8056</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2010</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>0.048951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11761</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2014</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>0.027145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15531</th>\n",
              "      <td>1.0</td>\n",
              "      <td>2012</td>\n",
              "      <td>12</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>0.010498</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bceeb57b-0758-4737-9dd1-6721a79408b6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bceeb57b-0758-4737-9dd1-6721a79408b6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bceeb57b-0758-4737-9dd1-6721a79408b6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-297e296b-ca94-4191-9cc1-756f5a617a47\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-297e296b-ca94-4191-9cc1-756f5a617a47')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-297e296b-ca94-4191-9cc1-756f5a617a47 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train",
              "summary": "{\n  \"name\": \"X_train\",\n  \"rows\": 15134,\n  \"fields\": [\n    {\n      \"column\": \"passenger_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2850234520610508,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          3.0,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2011,\n          2010,\n          2015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          7,\n          2,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 24,\n        \"samples\": [\n          19,\n          21,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"distanc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.405354385275664,\n        \"min\": 0.0,\n        \"max\": 360.308562,\n        \"num_unique_values\": 14521,\n        \"samples\": [\n          0.07547760009765625,\n          0.1214869999999948,\n          0.04004599999998959\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = ColumnTransformer([\n",
        "    (\"numeric\", num_pipe(poly=2), ['passenger_count','year','distanc']),\n",
        "    (\"categoric\", cat_pipe(encoder='onehot'), [\"month\",\"day\",\"hour\"]),\n",
        "])\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    (\"prep\",preprocessor),\n",
        "    (\"algo\",LinearRegression())\n",
        "])\n",
        "\n",
        "model = GridSearchCV(pipeline, gsp.linreg_poly_params, cv=3, n_jobs=-1, verbose=1)\n",
        "model.fit(X_train,y_train)\n",
        "\n",
        "#Evaluation\n",
        "print(model.best_params_)\n",
        "print(model.score(X_train,y_train), model.best_score_, model.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vHBqNrkud49n",
        "outputId": "4175da00-125b-409e-84f7-5f14c757db35"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 12 candidates, totalling 36 fits\n",
            "{'algo__fit_intercept': True, 'prep__numeric__poly__degree': 1, 'prep__numeric__poly__interaction_only': True}\n",
            "0.023086762040527953 0.015618230742341069 0.019173477278019213\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Feature Importance**\n",
        "\n",
        "jangan lakukan feature importance karena score nya saja masih parah"
      ],
      "metadata": {
        "id": "cO43OFCyfgqM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Evaluation**\n",
        "\n",
        "**Actual vs Prediction Plot**"
      ],
      "metadata": {
        "id": "i-M0HHT3ftOf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from jcopml.plot import plot_actual_vs_prediction, plot_residual"
      ],
      "metadata": {
        "id": "ZYZS_SPmfsdm"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_actual_vs_prediction(X_train, y_train, X_test, y_test, model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 397
        },
        "id": "WScGK-hbf8p5",
        "outputId": "5ef79866-d716-4cbc-d766-c61fa6ffad5d"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1100x500 with 2 Axes>"
            ],
            "image/png": "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+fPRrFkz/Otf/8KAAQOwfv16dO7cGdnZ2aX7Hj9+HJ06dcJ7772H6667DpMnT8Y//vEPJCQk4I033kBJSQkAICUlBY0aNSr9t7wMHTrUqW1mj5lqTp48CQBo0qRJmW3yuq+//trn81No8/7/dKIwk56eDgC46aabNB/zzjvvAFAOIp6MHj0ahw4dwpYtWzB69GjV+TInT55E+/bt8d1336FSpUpO26ZPn47XX38dkZGRpeskScK4cePwzjvv4LvvvkO3bt00tefzzz/H5s2bS/cvKSnBrbfeis2bNyMrKwudO3f2+jPK9u3bBwBo3rx5mW3yOnkfX88jr5fnMSUmJro9l6fvrqioCC+88AIkScLZs2exceNG7NmzB2PGjEHv3r09tpWIKJwZMaaOGjUKJ06cwPr160s7egDw9NNP48Ybb8T48ePxyy+/AAA++eQTXLhwAfPnz8f//d//OZ3n3LlzpZ3o1NRUbN68GX/99RdSU1O9brcSI8ZMNbVr1wYAHDx4ENdcc43TtoMHDwIA9u7d69O5KfSxg0rk4M8//ywNJI4JHerVq4cXX3xR0znWrVuHBQsW4JprrsHYsWMD2FogLS2tTOcUABo2bFhmncViwcMPP4x33nkHX331leYO6n333ee0b2RkJJKSkrB582Zs377dqYM6e/ZsPPnkk0hISNB07pycHABAXFxcmW2xsbFO+/h6Hm/OtXPnTsycORN169bF1KlTFfcpKirCzJkzS19bLBY8/vjjmD17tsd2EhGFEzPE1J9++gnff/89/vnPfzp1TgGgRYsWGD9+PObNm4ddu3Y5jZJRir01a9b06r3NHjPd6d+/P5YvX445c+bglltuKU24dPbsWcyfPx8AFDPmEwHsoBI52b9/v1PnAxDZXr/55htcffXVHo/fvn077rnnHsTFxeGjjz5CdHR0oJqKmJgYtGvXTnFbUVERXnvtNSxfvhx79uxBXl6eU6a948ePa36fG264ocy6Bg0aACgbXBISEjQHWqM5cOAABg4ciJKSEixfvrz07q+rqlWrQpIk2Gw2HD9+HJ9//jmmT5+OzMxMrF27tjSwExGFOzPE1KysLADAqVOnFJ907tmzp/Rn27ZtMXjwYEybNg0PP/wwNm7ciH79+qFHjx5o2rSp1+9t5pjpyX333YclS5Zg06ZNaNeuHfr164crV65g1apV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iDxjDCUib7CDSuTBmTNn0Lt3b6xfvx733nsvJEnSu0lERESmwBhKRN5iB5XIjb///hu33HILfvnlF8THx+P999+HxWLRu1lERESGxxhKRL5gB5VIxenTp3HLLbfg119/RUJCAjZv3oxWrVrp3SwiIiLDYwwlIl8xSRKRAjmw/vbbb0hISMCmTZvQsmVLvZtFRERkeIyhRFQefIJKpODxxx/Hb7/9hvr162Pz5s0MrERERBoxhhJRefAJKpGCV199Fbm5uXjxxRfRvHlzvZtDRERkGoyhRFQefIJK9D+XL18u/Xf16tWxatUqBlYiIgCvv/46GjdujJiYGFitVmzbtk3vJpHBMIYSkb+wg0oE4MSJE+jQoQPmz5+vd1OIiAzlgw8+wJQpU5CSkoIdO3agffv26Nu3L06fPq1308ggGENJV9nZwLJl4ieFBHZQKewdP34cPXv2xJ49e/Dvf/8bFy9e1LtJRESGMW/ePIwfPx5jxoxB69at8dZbb6Fy5cp455139G4aGQBjKOkqORno3BkYNUr8TE7Wu0XkB+ygUlg7duwYevbsib1796Jhw4bYvHkzqlWrpneziIgMoaioCD/++CNuvfXW0nURERG49dZbkZmZqXhMYWEhcnNznRYKTYyhpKvsbCAtzXldWhqfpIYAdlApbB07dgy9evXCvn370KhRI2zevBlNmjTRu1lERIZx5swZlJSUoF69ek7r69Wrh5MnTyoeM3v2bMTFxZUuiYmJwWgqBRljKOlu717v1pNpsINKYeno0aPo2bMn9u3bh8aNGzOwEhH5ybRp05CTk1O6HDlyRO8mkZ8xhpIhtGjh3XoyDXZQKSytXr0af/75J5o0aYLNmzejcePGejeJiMhwateujcjISJw6dcpp/alTpxAfH694THR0NGJjY50WCi2MoWQIViswdarzuuRksZ5MjXVQKSw9+OCDsNlsGDRoEBo2bKh3c4iIDKlixYq44YYbsHHjRgwdOhQAYLPZsHHjRkyaNEnfxpFuGEPJMObOBYYPF8N6W7Rg5zREsINKYePIkSOIi4srvZv/0EMP6dwiIpPJzuYfAWFoypQpSEpKwo033ohOnTph/vz5yM/Px5gxY/RuGgURYygZltXKmBRi2EGlsHDo0CH06tUL9evXx/r165llkMhbycnO2RKnThV3rink3XPPPfj7778xY8YM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sKy3thcJDQ3F06dPUVhY+NK+Pef89Hfvq4ODA3x9fVFRUYHa2lqD5T23BpgwYUK/6yUiIvonZiiR8eIElWiQWrduHaytrZGQkICamhqD5U1NTfjjjz90z3vON9m5cydaW1t17bW1tdi/f3+/31ej0QB4dkGFnkOkenR2durtuVWr1QCAu3fv9nv8uLg4dHR0YOvWrXp7r2/cuIHs7GyoVCosWLCg3+MRERH9EzOUyHjxHFSiQWrcuHE4dOgQ1q5di8DAQMyZMwd+fn7466+/cOfOHRQWFiI+Ph5HjhwB8OziCKtWrUJWVhaCgoKwcOFCPH36FLm5uZg8eTLOnj3br/edM2cONm3ahL179yIgIAALFy6Eq6sramtrkZeXh02bNiEpKQkAMGPGDOzduxdr1qxBTEwMhgwZAi8vL4OLMzxv8+bN+PHHH/H111+jvLwcM2fORENDA3Jzc9HZ2YmjR4/C3t7+lX9/RERkvpihREbs9d/Zhsi89XUPt38CIKZNm9Znn6tXr4qlS5cKT09PoVAohLOzs5g0aZLYsmWLKC8v1+vb2dkpMjIyhK+vr1AqlcLX11fs2rVLVFRU9Psebj2+++47ERERIVQqlbCxsRHe3t4iNjZWlJWV6fXLzMwUAQEBQqFQGKxPb/dwE0KIlpYWsX37djFq1Cjdfduio6PFpUuXDPr23MMtPz/fYFlWVpYAILKysnpdByIiGlyYoX+vDzOUTJWFEM99/09EREREREQkE56DSkREREREREaBE1QiIiIiIiIyCpygEhERERERkVHgBJWIiIiIiIiMAieoREREREREZBQ4QSUiIiIiIiKjwAkqERERERERGQVOUImIiIiIiMgocIJKRERERERERoETVCIiIiIiIjIKnKASERERERGRUeAElYiIiIiIiIzC/wH78o27G1tsiQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_residual(X_train, y_train, X_test, y_test, model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 512
        },
        "id": "iBdVieQbgRfL",
        "outputId": "d400b9c9-8d83-433c-f986-2b7af068601a"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Silahkan dicoba**"
      ],
      "metadata": {
        "id": "iwgVhtFHgdst"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = ColumnTransformer([\n",
        "    (\"numeric\", num_pipe(poly=2, transform='yeo-johnson'), ['passenger_count','year','distanc']),\n",
        "    (\"categoric\", cat_pipe(encoder='onehot'), [\"month\",\"day\",\"hour\"]),\n",
        "])\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    (\"prep\",preprocessor),\n",
        "    (\"algo\",LinearRegression())\n",
        "])\n",
        "\n",
        "model = GridSearchCV(pipeline, gsp.linreg_poly_params, cv=3, n_jobs=-1, verbose=1)\n",
        "model.fit(X_train,y_train)\n",
        "\n",
        "#Evaluation\n",
        "print(model.best_params_)\n",
        "print(model.score(X_train,y_train), model.best_score_, model.score(X_test,y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qn5G9pMFghjD",
        "outputId": "12f0fa2a-94bb-4fd8-ca06-c862a32cd260"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 12 candidates, totalling 36 fits\n",
            "{'algo__fit_intercept': True, 'prep__numeric__poly__degree': 3, 'prep__numeric__poly__interaction_only': False}\n",
            "0.7193850161370197 0.7157372041751695 0.7463959220293646\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ternyata residual plot tidak berbohon, tapi apa itu yeo-johnson, mari kita bahas materi selanjutnya"
      ],
      "metadata": {
        "id": "9N01AomyheCC"
      }
    }
  ]
}